`const _strategy = new LocalStrategy(  
  function (name, password, done) {

  }....`

When Passport authenticates a request, it parses the credentials contained in the request. 
It then invokes the verify callback with those credentials as arguments, 
in this case username and password. If the credentials are valid, 
the verify callback invokes done to supply Passport with the user that authenticated.


// Time are minutes x seconds x 1000 (milliseconds)
const oneHour = 60 * 60 * 1000
app.use(
  session({
    secret: process.env.SECRET,
    resave: false,
    saveUninitialized: true,
    cookie: {
      secure: false,
      maxAge: oneHour
    }
  })
)


Parameters

By default, LocalStrategy expects to find credentials in parameters named username and password.
 If your site prefers to name these fields differently, options are available to change the defaults.
 `passport.use(new LocalStrategy({
    usernameField: 'name',
    passwordField: 'password'
  },....`

  

  // // this doesn't work
    // console.log(chalk.bgYellow(`inside LocalStrategy`))
    // Shelter.find({ email: username }).then((err, user) => {
    //   if (err) {
    //     console.log(chalk.bgRed(`Error: if (err) ${JSON.stringify(err)}`))
    //     return done(err)
    //   }
    //   if (!user) {
    //     console.log(chalk.bgRed(`Error: !user`))
    //     return done(null, false)
    //   }
    //   if (user.password !== password) {
    //     console.log(chalk.bgRed(`Error: ${user.password} !== ${password}`))
    //     return done(null, flase)
    //   }
    //   return done(null, user[0])
    // })